WHITESPACE = _{ " " | NEWLINE }
COMMENT = _{ "%" ~ (!NEWLINE ~ ANY)* ~ (NEWLINE | EOI) }

precomputed_term = { infimum | integer | symbol | supremum }
    infimum = @{ "#infimum" | "#inf" }
    integer = @{ "0" | "-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }
    symbol = @{ !negation ~ "_"? ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_")* }
    supremum = @{ "#supremum" | "#sup" }

variable = @{ ASCII_ALPHA_UPPER ~ ASCII_ALPHANUMERIC* }

unary_operator = _{ negative }
    negative = { !integer ~ "-" }

binary_operator = _{ add | subtract | multiply | divide | modulo | interval }
    add = { "+" }
    subtract = { "-" }
    multiply = { "*" }
    divide = { "/" }
    modulo = { "\\" }
    interval = { ".." }

term = { unary_operator* ~ primary_term ~ (binary_operator ~ unary_operator* ~ primary_term)* }
    primary_term = _{ precomputed_term | variable | "(" ~ term ~ ")"}

predicate = { symbol ~ "/" ~ arity }
    arity =  @{ ("0") | (ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }

atom = { symbol ~ term_tuple? }
    term_tuple = _{ "(" ~ (term ~ ("," ~ term)*)? ~ ")" }

sign = { negation{0, 2} }
    negation = @{ "not" ~ &(WHITESPACE | EOI)}

literal = { sign ~ atom }

relation = _{ equal | not_equal | less_equal | less | greater_equal | greater }
    equal = { "=" }
    not_equal = { "!=" }
    less = { "<" }
    less_equal = { "<=" }
    greater = { ">" }
    greater_equal = { ">=" }

comparison = { term ~ relation ~ term }

atomic_formula = { comparison | literal }

head = { basic_head | choice_head | falsity }
    basic_head = { atom }
    choice_head = { "{" ~ atom ~ "}" }
    falsity = { "#false"? }

body = { (atomic_formula ~ (("," | ";") ~ atomic_formula)*)? }

rule = { (!"." ~ head ~ (":-" ~ body)?) ~ "." }

// TODO: Think about a proper way to handle the whitespace at the end of programs
program = { rule* ~ WHITESPACE* }
