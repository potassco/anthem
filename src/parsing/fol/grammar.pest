// Grammar for two-sorted target language (specifications, lemmas, user guides, etc.)
// X$i denotes variable X of sort integer, g$X denotes variable of sort general
// Unsorted variables are assumed to be of sort general.
// Distinguishes between integer and general terms, variables, etc.
// Both of these are distinct from program terms, variables, etc.
// This language is NOT a subset of TPTP BNF, but formulas written in this language
// can be transformed into TPTP formulas (Vampire-compatible input).

WHITESPACE = _{ " " | NEWLINE }

keyword = _{ primitive | nonassociative_binary_connective | associative_binary_connective | unary_connective | quantifier | sort }

    primitive = _{ infimum | supremum }
        infimum  = { "#inf" }
        supremum = { "#sup" }

    nonassociative_binary_connective = _{ implication | reverse_implication | equivalence }
        implication         = { "=>"  }
        reverse_implication = { "<="  }
        equivalence         = { "<=>" }

    associative_binary_connective = _{ conjunction | disjunction }
        conjunction = { "and" }
        disjunction = { "or"  }

    unary_connective = _{ negation }
        negation = { "not" }

    quantifier = _{ universal | existential }
        universal   = { "forall" }
        existential = { "exists" }

    sort = { integer_sort | general_sort }
        integer_sort = { "i" }
        general_sort = { "g" }

n_basic_term = { numeral | n_variable | infimum | supremum }
    numeral           = @{ ("0") | ("-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*) }
    unsorted_variable = @{ "_"? ~ ASCII_ALPHA_UPPER ~ (ASCII_ALPHANUMERIC | "_" | "'")* }
    n_variable        = @{ unsorted_variable ~ "$" ~ integer_sort }

unary_operator = _{ negative }
    negative = { !numeral ~ "-" }

binary_operator = _{ add | subtract | multiply }
    add      = { "+" }
    subtract = { "-" }
    multiply = { "*" }

n_term = { unary_operator* ~ n_primary ~ (binary_operator ~ unary_operator* ~ n_primary)* }
    n_primary = _{ n_basic_term | "(" ~ n_term ~ ")"}

g_term = { n_term | symbolic_constant | g_variable }
    symbolic_constant = @{ !(keyword) ~ "_"? ~ ASCII_ALPHA_LOWER ~ (ASCII_ALPHANUMERIC | "_" | "'")* }
    g_variable        = @{ unsorted_variable ~ "$" ~ general_sort | unsorted_variable }
